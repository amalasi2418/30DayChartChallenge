ggplot(aes(rev-exp,sports)) +geom_point()
View(TN)
SEC_conf %>%
filter(sports=="Basketball" && sports=="Football")%>%
group_by(institution_name) %>%
summarise(exp = sum(total_exp_menwomen,na.rm = T),rev = sum(total_rev_menwomen,na.rm = T)) %>%
ggplot(aes(rev-exp,institution_name)) +geom_point()
SEC_conf %>%
filter(sports=="Basketball" && sports=="Football")%>%
group_by(institution_name)
SEC_conf %>%
filter(sports=="Basketball" && sports=="Football")%>%
group_by(institution_name)
SEC_conf %>%
filter(sports=="Basketball" && sports=="Football")%>%
group_by(institution_name) %>%
summarise(exp = sum(total_exp_menwomen,na.rm = T),rev = sum(total_rev_menwomen,na.rm = T))
SEC_conf %>%
filter(sports=="Basketball" & sports=="Football")%>%
group_by(institution_name) %>%
summarise(exp = sum(total_exp_menwomen,na.rm = T),rev = sum(total_rev_menwomen,na.rm = T)) %>%
ggplot(aes(rev-exp,institution_name)) +geom_point()
SEC_conf %>%
filter(sports=="Basketball" & sports=="Football")
View(SEC_conf)
SEC_conf %>% filter(sports=="Basketball")
SEC_conf %>% filter(sports=="Basketball" && sports=="Football")
SEC_conf %>% filter(sports=="Basketball" & sports=="Football")
SEC_conf %>% filter(sports=="Basketball" | sports=="Football")
SEC_conf %>%
filter(sports=="Basketball" | sports=="Football")%>%
group_by(institution_name) %>%
summarise(exp = sum(total_exp_menwomen,na.rm = T),rev = sum(total_rev_menwomen,na.rm = T)) %>%
ggplot(aes(rev-exp,institution_name)) +geom_point()
SEC_conf %>% mutate(athelete_f = sum_partic_women*100/(sum_partic_men+sum_partic_women))
tt <- SEC_conf %>% mutate(athelete_f = sum_partic_women*100/(sum_partic_men+sum_partic_women))
View(tt)
athelete <- SEC_conf %>% mutate(athelete_f = sum_partic_women*100/(sum_partic_men+sum_partic_women),athelete_m=100-athelete_f)
revenue <- SEC_conf %>% mutate(profit_f = (rev_women - exp_women)*100/(total_rev_menwomen - total_exp_menwomen), profit_m = 100-profit_f)
View(revenue)
(88113-3685018)
-3596905/3685018
revenue <- SEC_conf %>% mutate(profit_f = (rev_women - exp_women), profit_m = (rev_men - exp_men))
athelete %>% ggplot(aes(sports, athelete_f))+geom_tile()
athelete %>% ggplot(aes(athelete_f,sports))+geom_tile()
View(athelete)
athelete %>% ggplot(aes(athelete_f,sports))+geom_col()
athelete <- SEC_conf %>% filter(institution_name == "The University of Tennessee-Knoxville") %>% mutate(athelete_f = sum_partic_women*100/(sum_partic_men+sum_partic_women),athelete_m=100-athelete_f)
View(athelete)
revenue <- SEC_conf %>% filter(institution_name == "The University of Tennessee-Knoxville") %>% mutate(profit_f = (rev_women - exp_women), profit_m = (rev_men - exp_men))
View(revenue)
# SEC
SEC_athelete <- SEC_conf %>% group_by(institution_name) %>% mutate(athelete_f = sum_partic_women*100/(sum_partic_men+sum_partic_women),athelete_m=100-athelete_f)
View(SEC_athelete)
# SEC
SEC_athelete <- SEC_conf %>% group_by(sports) %>% mutate(athelete_f = sum_partic_women*100/(sum_partic_men+sum_partic_women),athelete_m=100-athelete_f)
# SEC
SEC_athelete <- SEC_conf %>% group_by(sports,institution_name) %>% mutate(athelete_f = sum_partic_women*100/(sum_partic_men+sum_partic_women),athelete_m=100-athelete_f)
# SEC
SEC_athelete <- SEC_conf %>% group_by(sports,institution_name) %>% summarise(athelete_f = sum_partic_women*100/(sum_partic_men+sum_partic_women),athelete_m=100-athelete_f)
View(SEC_athelete)
# SEC
SEC_athelete <- SEC_conf %>% group_by(institution_name) %>% summarise(athelete_f = sum_partic_women*100/(sum_partic_men+sum_partic_women),athelete_m=100-athelete_f)
# SEC
SEC_athelete <- SEC_conf %>% group_by(institution_name) %>% summarise(athelete_f = sum_partic_women*100/(sum_partic_men+sum_partic_women),athelete_m=100-athelete_f) %>% select(sports)
# SEC
SEC_athelete <- SEC_conf%>% select(sports) %>% group_by(institution_name) %>% summarise(athelete_f = sum_partic_women*100/(sum_partic_men+sum_partic_women),athelete_m=100-athelete_f)
SEC_revenue <- SEC_conf %>% group_by(institution_name) %>% mutate(profit_f = (rev_women - exp_women), profit_m = (rev_men - exp_men))
View(SEC_revenue)
View(SEC_revenue)
View(athelete)
SEC_revenue <- SEC_conf %>% group_by(sports) %>% summarise(profit_f = (rev_women - exp_women), profit_m = (rev_men - exp_men))
View(SEC_revenue)
SEC_revenue <- SEC_conf %>%  summarise(profit_f = (rev_women - exp_women), profit_m = (rev_men - exp_men))
View(SEC_revenue)
SEC_revenue <- SEC_conf %>% group_by(institution_name,sports)%>% summarise(profit_f = (rev_women - exp_women), profit_m = (rev_men - exp_men))
View(SEC_revenue)
SEC_revenue <- SEC_conf %>% group_by(institution_name,sports,year)%>% summarise(profit_f = (rev_women - exp_women), profit_m = (rev_men - exp_men))
View(SEC_revenue)
View(SEC_conf)
SEC_revenue <- SEC_conf[-1] %>% group_by(institution_name,sports)%>% summarise(profit_f = (rev_women - exp_women), profit_m = (rev_men - exp_men))
View(SEC_revenue)
SEC_revenue <- SEC_conf[-1] %>% group_by(institution_name,sports,rev_women,exp_women,rev_men,exp_men)%>% summarise(profit_f = (rev_women - exp_women), profit_m = (rev_men - exp_men))
View(SEC_revenue)
SEC_revenue <- SEC_conf[-1] %>% group_by(institution_name,sports)%>% summarise(profit_f = (rev_women - exp_women), profit_m = (rev_men - exp_men)) %>% ungroup()
View(SEC_revenue)
SEC_revenue <- SEC_conf[-1] %>% group_by(institution_name,sports)%>% summarise(profit_f = sum(rev_women - exp_women), profit_m = sum(rev_men - exp_men)) %>% ungroup()
View(SEC_revenue)
SEC_revenue <- SEC_conf[-1] %>% group_by(sports)%>% summarise(profit_f = sum(rev_women - exp_women), profit_m = sum(rev_men - exp_men)) %>% ungroup()
View(SEC_revenue)
SEC_revenue1 <- SEC_conf[-1] %>% group_by(institution_name,sports)%>% summarise(profit_f = sum(rev_women - exp_women), profit_m = sum(rev_men - exp_men)) %>% ungroup()
View(SEC_revenue1)
View(SEC_conf)
View(athelete)
View(athelete)
View(athelete)
SEC_basketball <- SEC_conf %>% filter(sports=="Basketball")
View(SEC_basketball)
SEC_basketball <- SEC_conf %>% filter(sports=="Basketball" & year==2019)
View(SEC_basketball)
SEC_basketball %>% ggplot(aes(sum_partic_men,exp_men))+geom_point()
SEC_basketball %>% ggplot(aes(sum_partic_men,exp_men))+geom_point()+
geom_point(aes(sum_partic_women,exp_women),color="red")
SEC_basketball %>% ggplot(aes(sum_partic_men,exp_men/sum_partic_men))+geom_point()+
geom_point(aes(sum_partic_women,exp_womensum_partic_women),color="red")
SEC_basketball %>% ggplot(aes(sum_partic_men,exp_men/sum_partic_men))+geom_point()+
geom_point(aes(sum_partic_women,exp_women/sum_partic_women),color="red")
####################################################################
library(gsubfn)
library(tidyverse)
# Number of symbols in rule
s <- sample(15:26, 1)
# Extract s symbols from c("F", "+", "-") randomly
v1 <- sample(c("F", "+", "-"), size = s, replace = TRUE, prob = c(10,12,12))
# Add 3 pairs of brackets
v2 <- sample("[]", 3, replace = TRUE) %>% str_extract_all("\\d*\\+|\\d*\\-|F|L|R|\\[|\\]|\\|") %>% unlist
# Where to insert brackets
v3 <- sample(1:(s+1), size = length(v2)) %>% sort
# Insert them correctly
for(i in 1:length(v3)){
c(v1[1:(v3[i] + i - 1)], v2[i], v1[(v3[i] + i - 1):length(v1)]) -> v1
}
# All ictures start with the same axiom
axiom <- "F-F-F-F"
# Rule to substitute F, as generated previously
rules <- list("F"=paste(v1, collapse=""))
# Turning angle
angle <- 90
# Haw many times to apply the rule
depth <- sample(3:4,1)
# Longitude (factor) of the segments
ds <- jitter(1)
# Substitute axiom depth times
for (i in 1:depth) axiom <- gsubfn(".", rules, axiom)
# Actions that will gneerate the drawing
actions <- str_extract_all(axiom, "\\d*\\+|\\d*\\-|F|L|G|R|\\[|\\]|\\|") %>% unlist
# These vars store the current position, angle and longitude factor of the point
x_current <- 0
y_current <- 0
a_current <- 0
d_current <- 0
# To store point position, angle and longitude
status <- tibble(x = x_current,
y = y_current,
alfa = a_current,
depth = d_current)
# To store segments
lines <- data.frame(x = numeric(),
y = numeric(),
xend = numeric(),
yend = numeric())
# This loop reads actions and generates the drawing depending on the concrete action
#   F -> draw forward
#   + -> turn right
#   - -> turn left
#   [ -> save the current status of point
#   ] -> restore the last current status of point and remove from stack
for (action in actions)
{
if (action=="F") {
lines <- lines %>% add_row(x = x_current,
y = y_current,
xend = x_current + (ds^d_current) * cos(a_current * pi / 180),
yend = y_current + (ds^d_current) * sin(a_current * pi / 180))
x_current <- x_current + (ds^d_current) * cos(a_current * pi / 180)
y_current <- y_current + (ds^d_current) * sin(a_current * pi / 180)
d_current <- d_current + 1
}
if (action=="+") {
a_current <- a_current - angle
}
if (action=="-") {
a_current <- a_current + angle
}
if (action=="[") {
status <- status %>% add_row(x = x_current,
y = y_current,
alfa = a_current,
depth = d_current)
}
if (action=="]") {
x_current <- tail(status, 1) %>% pull(x)
y_current <- tail(status, 1) %>% pull(y)
a_current <- tail(status, 1) %>% pull(alfa)
d_current <- tail(status, 1) %>% pull(depth)
status <- head(status, -1)
}
}
lines %>%
mutate(x = round(x, 1),
y = round(y, 1),
xend = round(xend, 1),
yend = round(yend, 1)) %>%
distinct(x, y, xend, yend) -> lines
select(lines, x3 = x, y3 =y) %>%
bind_rows(select(lines, x3 = xend, y3 =yend)) %>%
distinct(x3, y3) -> points
# Let's find squares to fill inside the drawing
# Since this operation maybe hard to compute, I divide points into
# 10 pieces to process them separately
n <- 10
split(points, rep(1:ceiling(nrow(points)/n),
each = n,
length.out = nrow(points))) -> points_divided
# Squares1: add X3, y3 to current segments and filter to find
# right angles
lapply(points_divided, function(sub) {
sub %>%
crossing(lines) %>%
filter(x == x3 | y == y3 | xend == x3 | yend == y3) %>%
filter(x != x3 | y != y3 , xend != x3 | yend != y3) %>%
mutate(id = row_number())
}) %>% bind_rows() -> squares1
# Squares2:  keep those squares where some of new sides exist in lines
bind_rows(
squares1 %>%
inner_join(lines, c("x" = "x",
"y" = "y",
"x3" = "xend",
"y3" = "yend")),
squares1 %>%
inner_join(lines, c("xend" = "x",
"yend" = "y",
"x3" = "xend",
"y3" = "yend")),
squares1 %>%
inner_join(lines, c("x3" = "x",
"y3" = "y",
"x" = "xend",
"y" = "yend")),
squares1 %>%
inner_join(lines, c("x3" = "x",
"y3" = "y",
"xend" = "xend",
"yend" = "yend"))) %>%
distinct(x, y, xend, yend, x3, y3, id) -> squares2
# Remove those whose sides form a straight line
squares2 %>%
anti_join(squares2 %>% filter(x == xend, xend == x3),
by = c("x", "y", "xend", "yend", "x3", "y3", "id")) -> squares2
squares2 %>%
anti_join(squares2 %>% filter(y == yend, yend == y3),
by = c("x", "y", "xend", "yend", "x3", "y3", "id")) -> squares2
# We leave squares2 prepared for geom_rect
squares2 %>%
mutate(xmax = pmax(x, xend, x3),
xmin = pmin(x, xend, x3),
ymax = pmax(y, yend, y3),
ymin = pmin(y, yend, y3)) %>%
mutate(A = (xmax - xmin) * (ymax - ymin) / 2) -> squares
# Piet mondrian's palette
colors <- c("#FEFFFA","#000002","#F60201","#FDED01", "#1F7FC9")
# To remove very small squares I calculate quantiles form its area
qnts <- quantile(squares$A,
probs = seq(0, 1, 0.05),
na.rm = FALSE,
names = TRUE,
type = 7)
# Here comes the magic of ggplot
ggplot() +
geom_rect(aes(xmax = xmax,
xmin = xmin,
ymax = ymax,
ymin = ymin,
fill = id %% length(colors) %>% jitter(amount=.025)),
data = squares %>% filter(A >= qnts[1]), # remove small squares
lwd = 2,
color = "white") +
geom_segment(aes(x = x, y = y, xend = xend, yend = yend),
data = lines,
lwd = .65,
lineend = "square",
color = "#000002") +
scale_fill_gradientn(colors = colors) +
theme_void() +
theme(legend.position = "none") +
coord_equal() -> plot
# Calculate dimensions of the picture for ggsave
width <- max(points$x3) - min(points$x3)
height <- max(points$y3) - min(points$y3)
whmax <- 8
if (width >= height) {
w <- whmax
h <- whmax * height / width
} else {
h <- whmax
w <- whmax * width / height
}
plot
# Turning angle
angle <- 60
# Haw many times to apply the rule
depth <- sample(3:4,1)
# Longitude (factor) of the segments
ds <- jitter(1)
# Substitute axiom depth times
for (i in 1:depth) axiom <- gsubfn(".", rules, axiom)
# Actions that will gneerate the drawing
actions <- str_extract_all(axiom, "\\d*\\+|\\d*\\-|F|L|G|R|\\[|\\]|\\|") %>% unlist
# These vars store the current position, angle and longitude factor of the point
x_current <- 0
y_current <- 0
a_current <- 0
d_current <- 0
# To store point position, angle and longitude
status <- tibble(x = x_current,
y = y_current,
alfa = a_current,
depth = d_current)
# To store segments
lines <- data.frame(x = numeric(),
y = numeric(),
xend = numeric(),
yend = numeric())
# This loop reads actions and generates the drawing depending on the concrete action
#   F -> draw forward
#   + -> turn right
#   - -> turn left
#   [ -> save the current status of point
#   ] -> restore the last current status of point and remove from stack
for (action in actions)
{
if (action=="F") {
lines <- lines %>% add_row(x = x_current,
y = y_current,
xend = x_current + (ds^d_current) * cos(a_current * pi / 180),
yend = y_current + (ds^d_current) * sin(a_current * pi / 180))
x_current <- x_current + (ds^d_current) * cos(a_current * pi / 180)
y_current <- y_current + (ds^d_current) * sin(a_current * pi / 180)
d_current <- d_current + 1
}
if (action=="+") {
a_current <- a_current - angle
}
if (action=="-") {
a_current <- a_current + angle
}
if (action=="[") {
status <- status %>% add_row(x = x_current,
y = y_current,
alfa = a_current,
depth = d_current)
}
if (action=="]") {
x_current <- tail(status, 1) %>% pull(x)
y_current <- tail(status, 1) %>% pull(y)
a_current <- tail(status, 1) %>% pull(alfa)
d_current <- tail(status, 1) %>% pull(depth)
status <- head(status, -1)
}
}
lines %>%
mutate(x = round(x, 1),
y = round(y, 1),
xend = round(xend, 1),
yend = round(yend, 1)) %>%
distinct(x, y, xend, yend) -> lines
select(lines, x3 = x, y3 =y) %>%
bind_rows(select(lines, x3 = xend, y3 =yend)) %>%
distinct(x3, y3) -> points
# Let's find squares to fill inside the drawing
# Since this operation maybe hard to compute, I divide points into
# 10 pieces to process them separately
n <- 10
split(points, rep(1:ceiling(nrow(points)/n),
each = n,
length.out = nrow(points))) -> points_divided
# Squares1: add X3, y3 to current segments and filter to find
# right angles
lapply(points_divided, function(sub) {
sub %>%
crossing(lines) %>%
filter(x == x3 | y == y3 | xend == x3 | yend == y3) %>%
filter(x != x3 | y != y3 , xend != x3 | yend != y3) %>%
mutate(id = row_number())
}) %>% bind_rows() -> squares1
# Squares2:  keep those squares where some of new sides exist in lines
bind_rows(
squares1 %>%
inner_join(lines, c("x" = "x",
"y" = "y",
"x3" = "xend",
"y3" = "yend")),
squares1 %>%
inner_join(lines, c("xend" = "x",
"yend" = "y",
"x3" = "xend",
"y3" = "yend")),
squares1 %>%
inner_join(lines, c("x3" = "x",
"y3" = "y",
"x" = "xend",
"y" = "yend")),
squares1 %>%
inner_join(lines, c("x3" = "x",
"y3" = "y",
"xend" = "xend",
"yend" = "yend"))) %>%
distinct(x, y, xend, yend, x3, y3, id) -> squares2
# Remove those whose sides form a straight line
squares2 %>%
anti_join(squares2 %>% filter(x == xend, xend == x3),
by = c("x", "y", "xend", "yend", "x3", "y3", "id")) -> squares2
squares2 %>%
anti_join(squares2 %>% filter(y == yend, yend == y3),
by = c("x", "y", "xend", "yend", "x3", "y3", "id")) -> squares2
# We leave squares2 prepared for geom_rect
squares2 %>%
mutate(xmax = pmax(x, xend, x3),
xmin = pmin(x, xend, x3),
ymax = pmax(y, yend, y3),
ymin = pmin(y, yend, y3)) %>%
mutate(A = (xmax - xmin) * (ymax - ymin) / 2) -> squares
# Piet mondrian's palette
colors <- c("#FEFFFA","#000002","#F60201","#FDED01", "#1F7FC9")
# To remove very small squares I calculate quantiles form its area
qnts <- quantile(squares$A,
probs = seq(0, 1, 0.05),
na.rm = FALSE,
names = TRUE,
type = 7)
# Here comes the magic of ggplot
ggplot() +
geom_rect(aes(xmax = xmax,
xmin = xmin,
ymax = ymax,
ymin = ymin,
fill = id %% length(colors) %>% jitter(amount=.025)),
data = squares %>% filter(A >= qnts[1]), # remove small squares
lwd = 2,
color = "white") +
geom_segment(aes(x = x, y = y, xend = xend, yend = yend),
data = lines,
lwd = .65,
lineend = "square",
color = "#000002") +
scale_fill_gradientn(colors = colors) +
theme_void() +
theme(legend.position = "none") +
coord_equal() -> plot
plot
library(EBImage)
setwd("~/R/Infographics/30daysChartChallenge/day22")
library(tidyverse)
library(lubridate)
library(gganimate)
library(countrycode)
library(showtext)
showtext_auto()
sysfonts::font_families_google()
sysfonts::font_add_google("News Cycle","News Cycle")
satellites <- readxl::read_xls("UCS-Satellite-Database-1-1-2022.xls")
sat_data <-  data.frame(country = satellites$`Country of Operator/Owner`, year = year(satellites$`Date of Launch`))
launch <- sat_data %>% group_by(country, year)  %>%
summarise(satellite = n()) %>%
filter(!is.na(country))
unique(launch$country)
for (i in as.numeric(grep("/", launch$country))) {
launch$country[i] = "Multinational"
}
country <-launch %>% group_by(country) %>% summarise(total = sum(satellite)) %>% arrange(desc(total))
sum(country$total)
launch$continent <- countrycode(sourcevar = launch$country,
origin = "country.name",
destination = "continent")
launch <- launch %>%
#filter(year >= 1990) %>%
mutate(continent = case_when(country == "USA" ~ "USA",
country =="China"~"China",
country =="United Kingdom"~"United Kingdom",
country =="Russia"~"Russia",
country =="Japan"~"Japan",
country =="India"~"India",
country =="Canada"~ "Canada",
country %in% c("ESA","Multinational")~"Multinational",
TRUE ~continent))
n_distinct(launch$continent)
max(launch$satellite)
tt=launch %>% group_by(continent,year) %>%
summarise(total = sum(satellite)) %>%
mutate(tot = cumsum(total))
anim <- launch %>%
group_by(continent,year) %>%
summarise(total = sum(satellite)) %>%
mutate(tot = cumsum(total)) %>%
ggplot(aes(year, tot, group = continent)) +
geom_line(size=1,color = "#A2B38B") +
labs(title = "Who has satellites?",
subtitle = "As of 31st December 2021, a total of 4852 satellites have been\nlaunched. USA topping the chart with 2944 of them (including\ncollaborative). The data is shown for countries with 50+ satellites.\nMultinational refers to collaborative satellites, and the remaining\nsatellites are aggregated according to the continent.",
caption = "Data: www.ucsusa.org | Graphic: Abhinav Malasi") +
xlab("") + ylab("") +
geom_text(aes(x=year,y=tot), label = "|-o-|", size=8,color="#A2B38B") +
geom_text(aes(x=year-5,y=tot, label = continent), family="News Cycle",size=8,color="#A2B38B", vjust = 0.6) +
theme(legend.position = "none",
#legend.background = element_rect(color = "#191919", fill = "#191919"),
plot.background = element_rect(color = "#191919", fill = "#191919"),
panel.background = element_rect(color = "#191919", fill = "#191919"),
panel.grid = element_blank(),
plot.title = element_text(size = 60),
plot.subtitle = element_text(size = 30, lineheight = .35, margin = margin(b=5)),
plot.caption = element_text(size = 20),
plot.margin = margin(c(15, 5,5,5)),
text = element_text(color="#A2B38B", family = "News Cycle"),
axis.text = element_text(size = 20,color="#A2B38B"),
axis.ticks = element_line(color="#A2B38B"))
anim
animate(anim, 200, fps = 20,  width = 1200, height = 1200,
renderer = gifski_renderer("gganim.gif"))
animate(anim, 200, fps = 20,  width = 1200, height = 1000,
renderer = gifski_renderer("gganim.gif"))
animate(anim, 200, fps = 20,  width = 1200, height = 1200,
renderer = gifski_renderer("gganim.gif"))
